// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: streamer.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Scanner_Scan_FullMethodName = "/pb.Scanner/Scan"
)

// ScannerClient is the client API for Scanner service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ScannerClient interface {
	Scan(ctx context.Context, opts ...grpc.CallOption) (Scanner_ScanClient, error)
}

type scannerClient struct {
	cc grpc.ClientConnInterface
}

func NewScannerClient(cc grpc.ClientConnInterface) ScannerClient {
	return &scannerClient{cc}
}

func (c *scannerClient) Scan(ctx context.Context, opts ...grpc.CallOption) (Scanner_ScanClient, error) {
	stream, err := c.cc.NewStream(ctx, &Scanner_ServiceDesc.Streams[0], Scanner_Scan_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &scannerScanClient{stream}
	return x, nil
}

type Scanner_ScanClient interface {
	Send(*ScanningRequest) error
	CloseAndRecv() (*ScanningResponse, error)
	grpc.ClientStream
}

type scannerScanClient struct {
	grpc.ClientStream
}

func (x *scannerScanClient) Send(m *ScanningRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *scannerScanClient) CloseAndRecv() (*ScanningResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(ScanningResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ScannerServer is the server API for Scanner service.
// All implementations must embed UnimplementedScannerServer
// for forward compatibility
type ScannerServer interface {
	Scan(Scanner_ScanServer) error
	mustEmbedUnimplementedScannerServer()
}

// UnimplementedScannerServer must be embedded to have forward compatible implementations.
type UnimplementedScannerServer struct {
}

func (UnimplementedScannerServer) Scan(Scanner_ScanServer) error {
	return status.Errorf(codes.Unimplemented, "method Scan not implemented")
}
func (UnimplementedScannerServer) mustEmbedUnimplementedScannerServer() {}

// UnsafeScannerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ScannerServer will
// result in compilation errors.
type UnsafeScannerServer interface {
	mustEmbedUnimplementedScannerServer()
}

func RegisterScannerServer(s grpc.ServiceRegistrar, srv ScannerServer) {
	s.RegisterService(&Scanner_ServiceDesc, srv)
}

func _Scanner_Scan_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ScannerServer).Scan(&scannerScanServer{stream})
}

type Scanner_ScanServer interface {
	SendAndClose(*ScanningResponse) error
	Recv() (*ScanningRequest, error)
	grpc.ServerStream
}

type scannerScanServer struct {
	grpc.ServerStream
}

func (x *scannerScanServer) SendAndClose(m *ScanningResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *scannerScanServer) Recv() (*ScanningRequest, error) {
	m := new(ScanningRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Scanner_ServiceDesc is the grpc.ServiceDesc for Scanner service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Scanner_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.Scanner",
	HandlerType: (*ScannerServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Scan",
			Handler:       _Scanner_Scan_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "streamer.proto",
}
